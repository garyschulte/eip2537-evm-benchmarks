#define macro MAIN() = takes (0) returns (0) {
	// calldata is <input_size - 16 bytes, output_size - 16 bytes, precompile - 160 bytes, input..., output...>
	0x00
	calldataload
	
	dup1
	0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
	and
	0x80
	shr
	swap1
	// stack: raw_input, input_size


	0xffffffffffffffffffffffffffffffff
	and
	// stack: output_size, input_size

	// mem[0:input_size+output_size] <- calldatacopy(calldata[32:32+input_size+output_size])
	dup1
	dup3
	add
        0xc0
	0x00
	calldatacopy
	//stack: output_size, input_size

	0x20
	calldataload
	0x60
	shr

	//stack: precompile_address, output_size, input_size

	// loop that executes 256 iterations.
	0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00

	loop:
		// TODO: loop body inserted via templating
		dup4
		dup4
		add
		// stack: return offset, loop counter, precompile_address, output_size, input_size

		dup4
		swap1
		dup6
		0x00
		dup6
		gaslimit
		staticcall
		pop

		// stack: loop counter, precompile address, output size, input size

		// loop conditional jump evaluation
		0x01
		add
		dup1
		0x00
		gt
		loop jumpi
}
